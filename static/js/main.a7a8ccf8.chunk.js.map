{"version":3,"sources":["assets/BazaIT.svg","components/Tester/Tester.js","components/Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tester","Profile","useState","caption","data","axisX","axisY","stats","setStats","vacancies","geography","averageSalary","activeUsers","className","class","onClick","type","name","id","placeholder","disabled","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","fill","App","href","title","src","require","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7a8ccf8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BazaIT.304e5212.svg\";","import React from 'react';\r\nimport './Tester.css';\r\n\r\nconst Tester = () => {\r\n    return (\r\n        <div>Tests are here</div>\r\n    )\r\n}\r\n\r\nexport default Tester;","import React, { useState, PureComponent } from 'react';\r\nimport {\r\n  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\r\n} from 'recharts';\r\nimport './Profile.css';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport Tester from '../Tester/Tester';\r\n\r\nconst Profile = () => {\r\n\r\n    const [stats, setStats] = useState({ \r\n        caption: 'Vacancies per date',\r\n        data: [\r\n            { axisX: '2020-09-15', axisY: 35 },\r\n            { axisX: '2020-09-18', axisY: 5 },\r\n            { axisX: '2020-09-19', axisY: 15 },\r\n            { axisX: '2020-09-21', axisY: 15 },\r\n            { axisX: '2020-09-22', axisY: 25 },\r\n            { axisX: '2020-09-23', axisY: 5 },\r\n            { axisX: '2020-09-25', axisY: 35 },\r\n            { axisX: '2020-10-15', axisY: 0 },\r\n            { axisX: '2020-10-25', axisY: 10 },\r\n        ]})\r\n\r\n  // stats is a mock-up for real data which is fetched from API or DB and might be initialized within backend code\r\n\r\n  const vacancies = { \r\n        caption: 'Vacancies per date',\r\n        data: [\r\n            { axisX: '2020-09-15', axisY: 35 },\r\n            { axisX: '2020-09-18', axisY: 5 },\r\n            { axisX: '2020-09-19', axisY: 15 },\r\n            { axisX: '2020-09-21', axisY: 15 },\r\n            { axisX: '2020-09-22', axisY: 25 },\r\n            { axisX: '2020-09-23', axisY: 5 },\r\n            { axisX: '2020-09-25', axisY: 35 },\r\n            { axisX: '2020-10-15', axisY: 0 },\r\n            { axisX: '2020-10-25', axisY: 10 },\r\n        ]};\r\n\r\n    const geography = {\r\n        caption: 'Geography',\r\n        data: [\r\n            { axisX: 'Lutsk', axisY: 10 },\r\n            { axisX: 'Dnipro', axisY: 35 },\r\n            { axisX: 'Lviv', axisY: 44 },\r\n            { axisX: 'Kyiv', axisY: 54 },\r\n            { axisX: 'Kharkiv', axisY: 30 },\r\n            { axisX: 'Chernihiv', axisY: 15 },\r\n            { axisX: 'Zaporizhzhia', axisY: 11 },\r\n        ]};\r\n\r\n    const averageSalary = {\r\n        caption: 'Average Salary',\r\n        data: [\r\n            {axisX: '2020-01', axisY: 15000 },\r\n            {axisX: '2020-02', axisY: 14200 },\r\n            {axisX: '2020-03', axisY: 12000 },\r\n            {axisX: '2020-04', axisY: 13000 },\r\n            {axisX: '2020-05', axisY: 14000 },\r\n            {axisX: '2020-06', axisY: 15000 },\r\n            {axisX: '2020-07', axisY: 15000 },\r\n            {axisX: '2020-08', axisY: 17000 },\r\n            {axisX: '2020-09', axisY: 19000 },\r\n        ]};\r\n\r\n    const activeUsers = {\r\n        caption: 'Active Users',\r\n        data: [\r\n            { axisX: '2020-09-15', axisY: 25 },\r\n            { axisX: '2020-09-18', axisY: 17 },\r\n            { axisX: '2020-09-19', axisY: 23 },\r\n            { axisX: '2020-09-21', axisY: 20 },\r\n            { axisX: '2020-09-22', axisY: 8 },\r\n            { axisX: '2020-09-23', axisY: 22 },\r\n            { axisX: '2020-09-25', axisY: 24 },\r\n            { axisX: '2020-10-15', axisY: 15 },\r\n            { axisX: '2020-10-25', axisY: 27 },\r\n        ]\r\n    }\r\n  \r\n    return (\r\n        <div className=\"profile\">\r\n            <section className=\"section\">\r\n                <h2 className=\"section-title\">Аналітика</h2>\r\n                <nav class=\"section-nav\">\r\n                    <ul>\r\n                        <li class=\"section-nav-text\">Платформа</li>\r\n                        <li class=\"section-nav-text\">Профіль</li>\r\n                        <li class=\"section-nav-text\">Компания</li>\r\n                    </ul>\r\n                    \r\n                </nav>\r\n                <main class=\"container\">\r\n                    <nav class=\"aside\">\r\n                        <ul class=\"aside-ul\">\r\n                            <li class=\"aside-li\">\r\n                                <button class=\"aside-li-text\" onClick = {() => setStats(vacancies)}>Нових вакансій</button>\r\n                            </li>\r\n                            <li class=\"aside-li\">\r\n                                <button class=\"aside-li-text\" onClick = {() => setStats(geography)}>Географія вакансій</button>\r\n                            </li>\r\n                            <li class=\"aside-li\">\r\n                                <button class=\"aside-li-text\" onClick = {() => setStats(averageSalary)}>Средня заробітна плата</button>\r\n                            </li>\r\n                            <li class=\"aside-li\">\r\n                                <button class=\"aside-li-text\" onClick = {() => setStats(activeUsers)}>Активних користувачів</button>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n\r\n                    <main class=\"section\">\r\n                        <nav class=\"section-nav\">\r\n                            <ul class=\"nav-profile\">\r\n                                <li class=\"nav-profile-item\">День</li>\r\n                                <li class=\"nav-profile-item\">Тиждень</li>\r\n                                <li class=\"nav-profile-item\">Місяць</li>\r\n                                <li class=\"nav-profile-item\">Рік</li>\r\n                            </ul>\r\n                            <input type=\"text\" name=\"text\" id=\"text\" placeholder=\"Введіть міста через кому\" disabled/>\r\n                            <input type=\"date\" name=\"date\" id=\"date\"/>\r\n                        </nav>\r\n                        <div class=\"graphic\">\r\n                        <ResponsiveContainer>\r\n                            <AreaChart\r\n                                data={stats}\r\n                                margin={{\r\n                                top: 10, right: 30, left: 0, bottom: 0,\r\n                                }}\r\n                            >\r\n                                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                <XAxis dataKey=\"data.axisX\" />\r\n                                <YAxis />\r\n                                <Tooltip />\r\n                                <Area type=\"monotone\" dataKey=\"data.axiY\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n                            </AreaChart>\r\n                        </ResponsiveContainer>\r\n                        </div>\r\n                    </main>\r\n                </main>\r\n            </section>\r\n\r\n            <Tester />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport './App.css';\r\nimport Profile from './components/Profile/Profile';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"nav-bar\">\r\n          <a className=\"logo\" href=\"https://bazait.com\" title=\"BazaIT\"><img src={ require(\"./assets/BazaIT.svg\") } alt=\"BazaIT logo\"/></a>\r\n          <nav>\r\n            <ul>\r\n              <li>Компанії</li>\r\n              <li className=\"active\">Вакансії</li>\r\n              <li>Новини</li>\r\n            </ul>\r\n          </nav>\r\n          <button><span></span>UserName</button>\r\n        </div>\r\n      </header>\r\n      <Profile />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}