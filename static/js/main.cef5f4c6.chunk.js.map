{"version":3,"sources":["assets/BazaIT.svg","components/Statistics/Graphic.js","components/Statistics/Statistics.js","components/Tester/Tester.js","components/Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Graphic","title","stats","colors","canvasRef","useRef","useEffect","width","current","scrollWidth","height","scrollHeight","canvas","getContext","data","padding","type","clearRect","fillRect","segmentWidth","length","min","reduce","Infinity","segmentHeight","offset","max","beginPath","moveTo","i","n","lineTo","fillText","stroke","fillStyle","drawGraphic","className","ref","Statistics","graphics","Object","keys","map","el","key","Tester","Profile","useState","setStats","vacancies","geography","averageSalary","href","onClick","App","src","require","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cef5f4c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BazaIT.304e5212.svg\";","import React, { useRef, useEffect } from 'react';\r\n\r\nconst Graphic = ( {title, stats} ) => {\r\n\r\n    const colors = ['red', 'yellow', 'green', 'blue', 'pink', 'magenta', 'goldenrod', 'lime', 'grey'];\r\n\r\n    const canvasRef = useRef(null);\r\n\r\n    const drawGraphic = (data, canvas, { width, height, padding, type }) => {\r\n\r\n        canvas.clearRect(0, 0, width, height);\r\n        canvas.fillRect(padding * 2, padding, width - padding * 3, height - padding * 2);\r\n        canvas.clearRect(padding * 2 + 1, padding, width - padding * 3, height -  padding * 2 - 1);\r\n\r\n        // preliminary calculations\r\n        const offset = 3\r\n        const segments = data.length + 1;\r\n        const segmentWidth = (width - padding * 2 - offset) / segments;\r\n        const min = data.reduce((min, current) => min = current[1] < min ? current[1] : min, Infinity);\r\n        const max = data.reduce((max, current) => max = current[1] > max ? current[1] : max, -Infinity);\r\n        const segmentHeight = (height - padding - offset * 2 ) / (max - min);\r\n        \r\n        switch (type) {\r\n\r\n            // regular polyline graphic\r\n            case 'polyline':\r\n                canvas.beginPath();\r\n                canvas.moveTo(padding * 2 + offset, height - segmentHeight * (data[0][1] - min) - padding - offset);\r\n                for (let i = 1, n = data.length; i < n; i++) {\r\n                    canvas.lineTo(segmentWidth * (i + 1), height - segmentHeight * (data[i][1] - min) - padding - offset);\r\n                    canvas.fillText(data[i][1], padding * 2 - 25, height - segmentHeight * (data[i][1] - min) - padding - offset);\r\n                }\r\n                canvas.stroke();    \r\n            break;\r\n\r\n            // bar diagram\r\n            case 'bar':\r\n                canvas.fillStyle = colors[0];\r\n                canvas.fillRect(padding * 2 + offset, \r\n                                height - segmentHeight * (data[0][1] - min) - padding - offset, \r\n                                segmentWidth, \r\n                                segmentHeight * (data[0][1] - min));\r\n                for (let i = 1, n = data.length; i < n; i++) {\r\n                    canvas.fillStyle = colors[i % colors.length];\r\n                    canvas.fillRect(padding * 2 + offset + (segmentWidth + offset) * i,\r\n                                    height - segmentHeight * (data[i][1] - min) - padding - offset, \r\n                                    segmentWidth, \r\n                                    segmentHeight * (data[i][1] - min));\r\n                    canvas.fillStyle = 'black';\r\n                    canvas.fillText(data[i][1], padding * 2 - 25, height - segmentHeight * (data[i][1] - min) - padding - offset);\r\n                }\r\n            break;\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const width = canvasRef.current.scrollWidth;\r\n        const height = canvasRef.current.scrollHeight;\r\n        const canvas = canvasRef.current.getContext('2d');\r\n        let padding = 20;\r\n        let type = 'bar';\r\n\r\n        drawGraphic(stats, canvas, {width, height, padding, type})\r\n    })\r\n\r\n    return (\r\n        <div className=\"graphic-card\">\r\n            <h3 className=\"graphic-title\">{title}</h3>\r\n            <div className=\"graphic-diagram\" >\r\n                <canvas width={'600px'} height={'400px'} ref={canvasRef}></canvas>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Graphic;","import React from 'react';\r\nimport Graphic from './Graphic';\r\nimport './Statistics.css';\r\n\r\nconst Statistics = ( {stats} ) => {\r\n    const graphicTitles = Object.keys(stats);\r\n\r\n    // this is a little more complex solution than it could be but it allows to show few graphics for a single user\r\n\r\n    let graphics = graphicTitles.map((el, key) => <Graphic key={key} title={el} stats={stats[el]} />);\r\n    return (\r\n        <div className=\"statistics\">\r\n            { graphics }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport './Tester.css';\r\n\r\nconst Tester = () => {\r\n    return (\r\n        <div>Tests are here</div>\r\n    )\r\n}\r\n\r\nexport default Tester;","import React, {useState} from 'react';\r\nimport './Profile.css';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport Tester from '../Tester/Tester';\r\n\r\nconst Profile = () => {\r\n\r\n    const [stats, setStats] = useState({ \r\n        'Vacancies per date': [\r\n            ['2020-09-15', 35],\r\n            ['2020-09-18', 5],\r\n            ['2020-09-19', 15],\r\n            ['2020-09-21', 15],\r\n            ['2020-09-22', 25],\r\n            ['2020-09-23', 5],\r\n            ['2020-09-25', 35],\r\n            ['2020-10-15', 0],\r\n            ['2020-10-25', 10],\r\n        ]})\r\n\r\n  // stats is a mock-up for real data which is fetched from API or DB and might be initialized within backend code\r\n\r\n  const vacancies = { \r\n        'Vacancies per date': [\r\n            ['2020-09-15', 35],\r\n            ['2020-09-18', 5],\r\n            ['2020-09-19', 15],\r\n            ['2020-09-21', 15],\r\n            ['2020-09-22', 25],\r\n            ['2020-09-23', 5],\r\n            ['2020-09-25', 35],\r\n            ['2020-10-15', 0],\r\n            ['2020-10-25', 10],\r\n        ]};\r\n\r\n    const geography = {\r\n        'Geography': [\r\n            ['Lutsk', 10],\r\n            ['Dnipro', 35],\r\n            ['Lviv', 44],\r\n            ['Kyiv', 54],\r\n            ['Kharkiv', 30],\r\n            ['Chernihiv', 15],\r\n            ['Zaporizhzhia', 11],\r\n        ]};\r\n\r\n    const averageSalary = {\r\n        'Average Salary': [\r\n            ['2020-01', 15000],\r\n            ['2020-02', 14200],\r\n            ['2020-03', 12000],\r\n            ['2020-04', 13000],\r\n            ['2020-05', 14000],\r\n            ['2020-06', 15000],\r\n            ['2020-07', 15000],\r\n            ['2020-08', 17000],\r\n            ['2020-09', 19000],\r\n        ]};\r\n  \r\n    return (\r\n        <div className=\"profile\">\r\n            <nav className=\"profile-tab\">\r\n                <ul>\r\n                    <li><a href=\"#\" title=\"link to tab\">Profile Statistics</a></li>\r\n                    <li className=\"active-tab\"><a href=\"#\" title=\"link to tab\">General Statistics</a></li>\r\n                    <li><a href=\"#\" title=\"link to tab\">Comparative Statistics</a></li>\r\n                    <li><a href=\"#\" title=\"link to tab\">Company Statistics</a></li>\r\n                </ul>\r\n            </nav>\r\n            <div className=\"profile-tab\">\r\n                <nav className=\"profile-tab-nav\">\r\n                    <ul>\r\n                        <li className=\"active\"><button onClick = {() => setStats(vacancies)}>Vacancies per Day</button></li>\r\n                        <li className=\"active\"><button onClick = {() => setStats(geography)}>Vacancies Geography</button></li>\r\n                        <li className=\"active\"><button onClick = {() => setStats(averageSalary)}>Average Salary</button></li>\r\n                    </ul>\r\n                </nav>\r\n                <Statistics stats={stats}/>\r\n            </div>\r\n            <Tester />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport './App.css';\nimport Profile from './components/Profile/Profile';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"nav-bar\">\n          <a className=\"logo\" href=\"https://bazait.com\" title=\"BazaIT\"><img src={ require(\"./assets/BazaIT.svg\") } alt=\"BazaIT logo\"/></a>\n          <nav>\n            <ul>\n              <li>Компанії</li>\n              <li>Вакансії</li>\n              <li>Новини</li>\n            </ul>\n          </nav>\n          <button><span></span>UserName</button>\n        </div>\n      </header>\n      <Profile />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}